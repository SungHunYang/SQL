--SEQUENCE
CREATE TABLE TEST(
	NUM NUMBER(10),
	STRDATA VARCHAR2(300)
);
INSERT INTO TEST VALUES(1,'A');
SELECT * FROM TEST;

TRUNCATE TABLE TEST;

CREATE SEQUENCE TEST_SEQ
START WITH 1
INCREMENT BY 1;

INSERT INTO TEST VALUES(TEST_SEQ.NEXTVAL,'A');-- 시퀀스명.NEXTVAL하면 한번 쓰이고 값이 증가한다.
INSERT INTO TEST VALUES(TEST_SEQ.NEXTVAL,'B');
INSERT INTO TEST VALUES(TEST_SEQ.NEXTVAL,'C');
INSERT INTO TEST VALUES(TEST_SEQ.NEXTVAL,'D');
--------------------------------------------------------------------------------------------------------------------
SELECT * FROM PLAYER;
SELECT PLAYER_ID, PLAYER_NAME FROM PLAYER;
SELECT 3+5 FROM DUAL; -- 내장 데이터, 더한 값을 보여주는

---AS
SELECT PLAYER_ID 선수아이디, PLAYER_NAME AS 선수이름 FROM PLAYER; -- AS는 생략가능
-- 별칭에 띄어쓰기가 들어가면 띄어쓰기를 다른 하나로 인식함 그래서 쌍 따옴표" "로 묶어줘야함
SELECT PLAYER_ID "선수 아이디", PLAYER_NAME AS "선수 이름" FROM PLAYER;
-- .(하위연산자) : A.b --> A 안의 b / A의 b
SELECT PLAYER.PLAYER_NAME, TEAM.TEAM_NAME FROM TEAM,PLAYER;
SELECT P.PLAYER_NAME 선수이름, T.TEAM_NAME 팀이름 FROM TEAM T,PLAYER P;
SELECT * FROM PLAYER;
SELECT * FROM STADIUM;
SELECT * FROM TEAM;
--PLAYER 테이블에서 등번호, 선수별명 검색
SELECT BACK_NO 등번호, NICKNAME 선수별멍 FROM PLAYER;
--STADIUM과 TEAM 테이블에서 주소와 전화번호검색
SELECT S.ADDRESS 주소, T.TEL 전화번호 FROM STADIUM S, TEAM T;
--PLAYER, TEAM 테이블에서 소속팀코드, 팀이름 검색
SELECT P.TEAM_ID 소속팀코드, T.TEAM_NAME 팀이름 FROM PLAYER P, TEAM T;
-- NULL : 비어있음, 오라클에서 비어있는 값을 표현할 때 쓰이는키워드
-- NULL 비교를 할 때는 =,!= 이 아니라[ IS, IS NOT ]이용
SELECT BACK_NO "등 번호", NICKNAME "선수 별멍" FROM PLAYER
WHERE NICKNAME IS NOT NULL;

---연결
SELECT TEAM_ID "팀 코드",TEAM_NAME "팀 이름",DDD||'-'||TEL "전화번호" FROM TEAM; -- '-' 를 넣어서 딱 달라붙는거 방지해준다.

--BETWEEN
--선수들 중 1987년 ~ 1989년생 사이의 선수 검색하기
SELECT* FROM PLAYER
WHERE BIRTH_DATE BETWEEN TO_DATE('1987-01-01','YYYY-MM-DD');


--LIKE
--SELECT * FROM T_USER WHERE JUMIN LIKE('______2%');
--선수들 중 김씨와 이씨인 선수 검색
SELECT * FROM PLAYER WHERE PLAYER_NAME LIKE('김%') OR PLAYER_NAME LIKE('이%');
--경기장 중 경기도에 있는 경기장의 이름 검색
SELECT STADIUM_NAME FROM STADIUM WHERE ADDRESS LIKE('%경기도%');
--선수들 중 이씨면서 k06팀에 속한 선수들 검색
SELECT * FROM PLAYER WHERE TEAM_ID = 'K06' AND PLAYER_NAME LIKE('이%');
--선수들 중 이름이 외자인 선수들 검색
SELECT * FROM PLAYER WHERE PLAYER_NAME LIKE('__');
--교수들 중 고용일이 2000년대 이전인 교수들만 검색
SELECT * FROM T_PROFESSOR WHERE HIREDATE <= TO_DATE('2000-01-01','YYYY-MM-DD');
SELECT * FROM T_PROFESSOR WHERE TO_CHAR(HIREDATE,'YYYY') LIKE('19__');

--CASE문
SELECT * FROM EMP;
SELECT ENAME,SAL,
CASE
	WHEN SAL>=3000 THEN 'HIGH'
	WHEN SAL>=1000 THEN 'MID'  -- 위의 조건문에서 한번 걸러지니까 SAL<3000 AND 는 쓸 필요 없음
	ELSE 'LOW'
END "클래스"
FROM EMP;

SELECT * FROM EMP;
--EMP 사원들 중 2000이상 급여는 보너스 1000
--1000이상 2000미만 인 사람 500
-- 나머지는 0
--사원명, 급여, 보너스 검색
SELECT ENAME "사원명", SAL "급여",
CASE
	WHEN SAL >=2000 THEN 1000
	WHEN SAL >=1000 THEN 500
	ELSE 0
END "보너스"
FROM EMP;
--경기장에서 좌석이 0이상 30000이하이면 크기를 S
-- 30000초과 50000이하이면 M
-- 50000초과 이면 L
-- 주소, 이름, 좌석수, 크기 검색
SELECT ADDRESS "주소", STADIUM_NAME "이름", SEAT_COUNT "좌석 수",
CASE
	WHEN SEAT_COUNT >50000 THEN 'L'
	WHEN SEAT_COUNT >30000 THEN 'M'
	ELSE 'S'
END "크기"
FROM STADIUM;
-- 선수들중 몸무게가 50~70이면 L, 71~80이면 M, NULL이면 미등록 그외에는 H
-- 선수이름, 몸무게, 키, 체급검색
SELECT PLAYER_NAME "선수이름", WEIGHT "몸무게", HEIGHT "키",
CASE
	WHEN WEIGHT BETWEEN 50 AND 70 THEN 'L'
	WHEN WEIGHT BETWEEN 71 AND 80 THEN 'M'
	WHEN WEIGHT IS NULL THEN '미등록'
	ELSE 'H'
END "체급"
FROM PLAYER;
--NULL 처리하기
-- 선수들의 이름과 몸무게를 검색하되 몸무게가 NULL이라면 0으로 아니라면 그대로 검색
SELECT 
PLAYER_NAME "선수 이름",
CASE
	 WHEN WEIGHT IS NULL THEN 0
	 ELSE WEIGHT
END "몸무게"
FROM PLAYER;
--NVL(컬럼명,대체할값) : 해당 컬럼의 데이터가 NULL인경우 뒤의 대체할 값으로 대신 사용한다.
SELECT NVL(WEIGHT,0) FROM PLAYER;

--정규화실습
--수하물 관리 업체 (테이블 개수 :3 / 컬럼 :3~5)
--승객, 비행기, 수하물
CREATE TABLE CUSTOMER(
	NAME VARCHAR2(300),
	ID VARCHAR2(300),
	AIR VARCHAR2(300),
	PHONE VARCHAR2(300),
	CONSTRAINT PK_ID PRIMARY KEY (ID),
	CONSTRAINT FK_AIR FOREIGN KEY (AIR) REFERENCES AIRPLANE(AIR_CODE)
);

CREATE TABLE AIRPLANE(
	AIR_CODE VARCHAR2(300),
	AIR_NAME VARCHAR2(300),
	HANGGONG VARCHAR2(300),
	CONSTRAINT PK_CODE PRIMARY KEY(AIR_CODE)
);

CREATE TABLE JIM(
	NUM VARCHAR2(300),
	CODE VARCHAR2(300),
	WEIGHT VARCHAR2(300),
	KIND VARCHAR2(300),
	CONSTRAINT FK_CODE FOREIGN KEY(CODE) REFERENCES AIRPLANE(AIR_CODE),
	CONSTRAINT PK_NUM PRIMARY KEY(NUM)
);

CREATE TABLE LIST(
	ID VARCHAR2(300),
	NUM VARCHAR2(300),
	CONSTRAINT FK_ID FOREIGN KEY(ID) REFERENCES CUSTOMER(ID),
	CONSTRAINT FK_NUM FOREIGN KEY(NUM) REFERENCES JIM(NUM)
);





















