--DML
CREATE TABLE CAR(
	BRAND VARCHAR2(300),
	COLOR VARCHAR2(300),
	PRICE NUMBER(10)
);
--INSERT
INSERT INTO CAR
VALUES('Ferrari',6500,'Red');
--컬럼을 작성한 경우에는 그 컬럼에 해당하는 값들만 순서에 맟줘서 삽입한다.
INSERT INTO CAR (PRICE)
VALUES(7000);

--UPDATE
UPDATE CAR
SET BRAND = 'K7', COLOR='WHITE'
WHERE PRICE = 7000;

INSERT INTO CAR
VALUES('Genesis',7000,'Black');

UPDATE CAR
SET PRICE = 65000000
WHERE BRAND ='Genesis';

UPDATE CAR
SET PRICE = 650000000
WHERE BRAND ='Ferrari';
--DELETE
DELETE FROM CAR
WHERE COLOR='Red';

DELETE FROM CAR
WHERE PRICE <=7000;
--테이블 내용 전체 삭제
DELETE FROM CAR; -- 이렇게 조건이 없으면 전부 다 삭제 된다. 얘는 다시 되돌리거나 불러올 수 있다. 복구가 가능
TRUNCATE TABLE CAR; -- 얘는 DML이 아니라 DDL이다 , 속도감 있게 빠르게 삭제 가능, 얘는 다시 되돌리거나 불러올 수 없다. 복구 불가능

--SELECT
SELECT * FROM CAR ; -- * --> 모든 것
SELECT PRICE FROM CAR WHERE BRAND = 'Ferrari';

-- 실습
-- 아이디, 패스워드, 이름, 나이
-- 입력 받았다고 가정하고 테이블에 집어 넣기
-- 3명 INSERT( apple : 김사과 / banana : 반하나 / cherry : 이제리 / durian : 최두리)
-- 이체리 비밀번호는 aaaa1111로 변경
-- 최두리는 탈퇴 시키기
CREATE TABLE T_USER -- 키워드 이름을 테이블명으로 쓸 때는 "" 사용
(
	ID VARCHAR2(300),
	PW VARCHAR2(300),
	NAME VARCHAR2(300),
	AGE NUMBER(3),
	CONSTRAINT ID_PK PRIMARY KEY (ID)
);

INSERT INTO T_USER VALUES('apple','abcd1234','김사과',10);
INSERT INTO T_USER VALUES('banana','abcd1234','반하나',20);
INSERT INTO T_USER VALUES('cherry','abcd1234','이체리',17);
INSERT INTO T_USER VALUES('durian','abcd1234','최두리',28);

SELECT * FROM T_USER;

UPDATE T_USER
SET PW ='aaaa1111'
WHERE ID ='cherry';

DELETE FROM T_USER
WHERE ID='durian';

-- 3명의 학생들 수강신청 완료시키기
-- STUDENT, SUBJECT >> LIST
-- PROFESSOR >> SUBJECT
SELECT * FROM STUDENT;
SELECT * FROM SUBJECT;
SELECT * FROM PROFESSOR;
SELECT * FROM LIST;

INSERT INTO PROFESSOR
VALUES ('p001','정다솔','소프트웨어');
INSERT INTO PROFESSOR
VALUES ('p002','한동석','소프트웨어');
INSERT INTO PROFESSOR
VALUES ('p003','홍길동','경영');
INSERT INTO PROFESSOR
VALUES ('p004','이순신','해양조선');

INSERT INTO SUBJECT
VALUES ('DBMS','소프트웨어','p001',35,001);
INSERT INTO SUBJECT
VALUES ('Python','소프트웨어','p002',35,002);
INSERT INTO SUBJECT
VALUES ('거북선제조법','해양조선','p004',35,003);
INSERT INTO SUBJECT
VALUES ('JAVA','소프트웨어','p003',35,004);

INSERT INTO STUDENT(NUM,JUMIN,NAME,MAJOR)
VALUES (1901,'9901011000001','김사과','소프트웨어');
INSERT INTO STUDENT(NUM,JUMIN,NAME,MAJOR)
VALUES (1902,'9901012000001','반하나','소프트웨어');
INSERT INTO STUDENT(NUM,JUMIN,NAME,MAJOR)
VALUES (1801,'9901011000011','이체리','해양조선');

INSERT INTO LIST VALUES(1901,002);
INSERT INTO LIST VALUES(1902,002);
INSERT INTO LIST VALUES(1801,003);

--CASCADE --> 참조하는거까지 지우는것
DELETE FROM STUDENT WHERE NUM=1902;

-- 축구 시나리오
SELECT * FROM PLAYER;
SELECT * FROM TEAM;
SELECT * FROM SCHEDULE;
SELECT * FROM STADIUM;
-- 직원  - 회사위치
SELECT * FROM DEPT;
SELECT * FROM EMP;
-- 직원 - 부서 - 위치
SELECT * FROM EMPLOYEES;
SELECT * FROM DEPARTMENTS;
SELECT * FROM LOCATIONS;
SELECT * FROM JOBS;
-- 학교 - 학생
SELECT * FROM T_STUDENT;
SELECT * FROM T_PROFESSOR;
SELECT * FROM T_DEPARTMENT;
-- 이것도 세트래 뭔지 모르겠는데
SELECT * FROM T_EMP;
SELECT * FROM T_DEPT;

-----------------------------------------------------------------------------------------------------------

--PLAYER 테이블에서 TEAM_ID가 K01인 선수 검색
SELECT * FROM PLAYER WHERE TEAM_ID ='K01';
--PLAYER 테이블에서 TEAM_ID가 K01이 아닌 선수의 이름과 몸무게 검색
SELECT TEAM_ID,PLAYER_NAME,WEIGHT FROM PLAYER WHERE TEAM_ID !='K01';
--PLAYER 테이블에서 WEIGHT가 80이하인 선수의 이름과 키와 몸무게 검색
SELECT PLAYER_NAME,WEIGHT FROM PLAYER WHERE WEIGHT<=80;
--PLAYER 테이블에서 HEIGHT가 170이상인 선수 검색
SELECT * FROM PLAYER WHERE HEIGHT>=170;
--PLAYER 테이블에서 WEIGHT가 70이상 80이하인 선수 검색
SELECT * FROM PLAYER WHERE WEIGHT>=70 AND WEIGHT<=80;
--PLAYER 테이블에서 HEIGHT가 170이하이고 WEIGHT가 70이상인 선수검색
SELECT * FROM PLAYER WHERE HEIGHT<=170 AND WEIGHT>=70;
--PLAYER 테이블에서 TEAM_ID가 K03인 JOIN_YYY가 2011인 선수 검색
SELECT * FROM PLAYER WHERE TEAM_ID ='K03' AND JOIN_YYYY = 2011;
--PLAYER 테이블에서 BIRTH_DATE가 1987년 이후이고 TEAM_ID는 K06인 선수 검색
-- 이거 데이트 잘 확인하기! 이렇게 하는거다
-- TO_DATE로 변경하면 지난 시간이 초단위로 나오기 때문에 오래 지날 수록 숫자가 크다!
SELECT * FROM PLAYER WHERE BIRTH_DATE >=TO_DATE('1988-01-01','YYYY-MM-DD') AND TEAM_ID='K06';
--PLAYER 테이블에서 TEAM_ID가 K04이고 JOIN_YYYY가 2011이거나 2012인 선수 검색
SELECT * FROM PLAYER WHERE TEAM_ID='K04'AND (JOIN_YYYY=2011 OR JOIN_YYYY=2012); -- 다른 방법으로는 JOIN_YYYY IN ('2011','2012') 이것도 가능
--PLAYER 테이블에서 POSITION이 DF인 선수중 KO5 팀에 속한 선수들의 이름과 포지션, 등번호 검색
SELECT PLAYER_NAME,"POSITION",BACK_NO FROM PLAYER WHERE "POSITION"='DF' AND TEAM_ID='K05';






